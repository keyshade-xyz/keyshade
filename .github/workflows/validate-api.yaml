name: Validate API

on:
  push:
    branches:
      - '!develop'
      - '!main'
    paths: ['apps/api/**', '.github/workflows/validate-api.yaml']
  pull_request:
    paths: ['apps/api/**', '.github/workflows/validate-api.yaml']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-node-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: Validate API (Node)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.2.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install packages
        run: |
          pnpm i

      - name: Lint
        run: |
          pnpm run lint:api

      - name: Build deps
        run: |
          pnpm run db:generate-types
          pnpm run build:schema

      - name: Unit tests
        run: |
          pnpm run db:generate-types
          pnpm run unit:api

      - name: E2E tests
        env:
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: secret
        run: pnpm run e2e:api

      - name: Upload e2e test coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          version: 'v0.1.15'
        with:
          flags: api-e2e-tests
          files: /coverage/apps/api/coverage-final.json

  validate-docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: Validate API (Docker)
    needs: validate-node-build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.2.0
          run_install: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Ensure Docker network
        run: docker network inspect keyshade-ci >/dev/null 2>&1 || docker network create keyshade-ci

      - name: Build API image
        run: pnpm docker:build:api

      - name: Verify API image
        run: docker image inspect keyshade/api:ci-${{ github.sha }}

      - name: Start API dependencies
        run: |
          set -euo pipefail

          docker run -d --rm --name keyshade-ci-postgres --network keyshade-ci \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=postgres \
            postgres:15

          docker run -d --rm --name keyshade-ci-redis --network keyshade-ci redis:7

          for i in {1..30}; do
            if docker exec keyshade-ci-postgres pg_isready -U postgres >/dev/null 2>&1; then
              echo "Postgres is ready"
              break
            fi
            if [ "$i" -eq 30 ]; then
              echo "Postgres failed to become ready in time"
              docker logs keyshade-ci-postgres || true
              exit 1
            fi
            echo "Waiting for Postgres... ($i/30)"
            sleep 2
          done

          for i in {1..30}; do
            if docker exec keyshade-ci-redis redis-cli ping >/dev/null 2>&1; then
              echo "Redis is ready"
              break
            fi
            if [ "$i" -eq 30 ]; then
              echo "Redis failed to become ready in time"
              docker logs keyshade-ci-redis || true
              exit 1
            fi
            echo "Waiting for Redis... ($i/30)"
            sleep 2
          done

      - name: Run API container
        run: pnpm docker:run:api

      - name: API health check
        run: |
          set -euo pipefail
          for i in {1..30}; do
            if curl -fsS "http://127.0.0.1:4200/health" >/dev/null; then
              echo "Health check passed"
              exit 0
            fi
            echo "Waiting for service... ($i/30)"
            sleep 2
          done
          echo "Service failed to become healthy in time"
          docker logs api-ci || true
          exit 1

      - name: Cleanup
        if: always()
        run: |
          set -euo pipefail
          docker ps -a || true
          if [ "${{ job.status }}" != 'success' ]; then
            docker logs api-ci || true
            docker logs keyshade-ci-postgres || true
            docker logs keyshade-ci-redis || true
          fi
          docker rm -f api-ci || true
          docker rm -f keyshade-ci-postgres || true
          docker rm -f keyshade-ci-redis || true
          docker image rm -f keyshade/api:ci-${{ github.sha }} || true
          docker network rm keyshade-ci || true
