name: Release and deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'stage' }}
      version: ${{ steps.fetch-tag.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install PNPM
        run: npm i -g pnpm

      - name: Install
        run: pnpm i

      - name: Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          GITHUB_CLIENT_ID: dummy
          GITHUB_CLIENT_SECRET: dummy
          GITHUB_CALLBACK_URL: dummy
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: secret
        run: pnpm dlx semantic-release

      - name: Fetch latest tag
        env:
          GH_TOKEN: ${{ github.token }}
        id: fetch-tag
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            version=`gh release list -L 1 --exclude-pre-releases --json tagName --jq ".[0].tagName" | sed 's/^v//'`
          else
            version=`gh release list --json tagName --jq ".[].tagName" | grep "stage" | head -n 1 | sed 's/^v//'`
          fi
          echo "Working with version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

  deploy-api:
    needs: release
    runs-on: ubuntu-latest
    environment: ${{ needs.release.outputs.environment }}
    name: Deploy API

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ vars.ACR_REGISTRY_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push docker image
        id: build
        env:
          ACR_REGISTRY_URL: ${{ vars.ACR_REGISTRY_URL }}
          REPOSITORY_NAME: api
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          # Build a docker container and push it to ACR
          echo "Building image..."
          docker build \
            -t $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION \
            -f apps/api/Dockerfile .

          # Push the image
          echo "Pushing image to ACR..."
          docker push $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION

      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.CONTAINER_APP_SP_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Update Azure Container App
        uses: azure/cli@v2
        env:
          API_CONTAINER: ${{ vars.API_CONTAINER }}
          API_CONTAINER_RG: ${{ vars.API_CONTAINER_RG }}
          ACR_REGISTRY_URL: ${{ vars.ACR_REGISTRY_URL }}
          REPOSITORY_NAME: api
          VERSION: ${{ needs.release.outputs.version }}
        with:
          azcliversion: latest
          inlineScript: |
            az containerapp update \
              --name $API_CONTAINER \
              --resource-group $API_CONTAINER_RG \
              --image $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION

  migrate-api:
    name: Apply Database Migrations
    runs-on: ubuntu-latest
    environment: ${{ needs.release.outputs.environment }}
    needs: [deploy-api, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install PNPM
        run: npm i -g pnpm

      - name: Install
        run: pnpm i

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Run migrations
          pnpm db:generate-types
          DATABASE_URL=$DATABASE_URL pnpm db:deploy-migrations

  release-sentry-api:
    name: Sentry API
    runs-on: ubuntu-latest
    environment: ${{ needs.release.outputs.environment }}
    needs: [deploy-api, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install PNPM
        run: npm i -g pnpm

      - name: Install
        run: pnpm i

      - name: Cache API Build
        uses: actions/cache@v3
        with:
          path: apps/api/dist
          key: ${{ runner.os }}-api-dist-${{ hashFiles('apps/api/src/**/*', 'apps/api/package.json') }}
          restore-keys: |
            ${{ runner.os }}-api-dist-

      - name: Build
        run: pnpm build:api

      - name: Install Sentry CLI
        run: npm i -g @sentry/cli

      - name: Sentry Release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_API_PROJECT }}
          ENVIRONMENT: ${{ needs.release.outputs.environment }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          sentry-cli releases new $VERSION
          sentry-cli releases set-commits --auto $VERSION
          sentry-cli releases deploys $VERSION new -e $ENVIRONMENT
          sentry-cli sourcemaps inject apps/api/dist
          sentry-cli sourcemaps upload --release $VERSION -p $SENTRY_PROJECT apps/api/dist

  deploy-platform:
    needs: release
    runs-on: ubuntu-latest
    environment: ${{ needs.release.outputs.environment }}
    name: Deploy Platform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ vars.ACR_REGISTRY_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push docker image
        id: build
        env:
          ACR_REGISTRY_URL: ${{ vars.ACR_REGISTRY_URL }}
          REPOSITORY_NAME: platform
          VERSION: ${{ needs.release.outputs.version }}
          NEXT_PUBLIC_BACKEND_URL: ${{ vars.NEXT_PUBLIC_BACKEND_URL }}
          NEXT_PUBLIC_SENTRY_PLATFORM_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_PLATFORM_DSN }}
          NEXT_PUBLIC_SENTRY_PLATFORM_PROFILE_SAMPLE_RATE: ${{ vars.NEXT_PUBLIC_SENTRY_PLATFORM_PROFILE_SAMPLE_RATE }}
          NEXT_PUBLIC_SENTRY_PLATFORM_TRACES_SAMPLE_RATE: ${{ vars.NEXT_PUBLIC_SENTRY_PLATFORM_TRACES_SAMPLE_RATE }}
          NEXT_PUBLIC_SENTRY_ENVIRONMENT: ${{ needs.release.outputs.environment }}
          NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
          NEXT_PUBLIC_POSTHOG_HOST: ${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}
        run: |
          # Build a docker container and push it to ACR
          echo "Building image..."
          docker build \
            -t $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION \
            --build-arg NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL \
            --build-arg NEXT_PUBLIC_SENTRY_PLATFORM_DSN=$NEXT_PUBLIC_SENTRY_PLATFORM_DSN \
            --build-arg NEXT_PUBLIC_SENTRY_PLATFORM_PROFILE_SAMPLE_RATE=$NEXT_PUBLIC_SENTRY_PLATFORM_PROFILE_SAMPLE_RATE \
            --build-arg NEXT_PUBLIC_SENTRY_PLATFORM_TRACES_SAMPLE_RATE=$NEXT_PUBLIC_SENTRY_PLATFORM_TRACES_SAMPLE_RATE \
            --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=$NEXT_PUBLIC_SENTRY_ENVIRONMENT \
            --build-arg NEXT_PUBLIC_POSTHOG_KEY=$NEXT_PUBLIC_POSTHOG_KEY \
            --build-arg NEXT_PUBLIC_POSTHOG_HOST=$NEXT_PUBLIC_POSTHOG_HOST \
            -f apps/platform/Dockerfile .

          # Push the image
          echo "Pushing image to ACR..."
          docker push $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION

      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.CONTAINER_APP_SP_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Update Azure Container App
        uses: azure/cli@v2
        env:
          PLATFORM_CONTAINER: ${{ vars.PLATFORM_CONTAINER }}
          PLATFORM_CONTAINER_RG: ${{ vars.PLATFORM_CONTAINER_RG }}
          ACR_REGISTRY_URL: ${{ vars.ACR_REGISTRY_URL }}
          REPOSITORY_NAME: platform
          VERSION: ${{ needs.release.outputs.version }}
        with:
          azcliversion: latest
          inlineScript: |
            az containerapp update \
              --name $PLATFORM_CONTAINER \
              --resource-group $PLATFORM_CONTAINER_RG \
              --image $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION

  release-sentry-platform:
    name: Sentry Platform
    runs-on: ubuntu-latest
    environment: ${{ needs.release.outputs.environment }}
    needs: [deploy-platform, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install PNPM
        run: npm i -g pnpm

      - name: Install
        run: pnpm i

      - name: Cache Platform Build
        uses: actions/cache@v3
        with:
          path: apps/platform/.next
          key: ${{ runner.os }}-platform-next-${{ hashFiles('apps/platform/**/*.[jt]s*', 'apps/platform/package.json') }}
          restore-keys: |
            ${{ runner.os }}-platform-next-

      - name: Build
        run: pnpm build:platform

      - name: Install Sentry CLI
        run: npm i -g @sentry/cli

      - name: Sentry Release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PLATFORM_PROJECT }}
          ENVIRONMENT: ${{ needs.release.outputs.environment }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          sentry-cli releases new $VERSION
          sentry-cli releases set-commits --auto $VERSION
          sentry-cli releases deploys $VERSION new -e $ENVIRONMENT
          sentry-cli releases files $VERSION upload-sourcemaps apps/platform/.next/static/chunks \
            --url-prefix '~/_next' \
            --validate \
            --rewrite

  deploy-web:
    runs-on: ubuntu-latest
    environment: ${{ needs.release.outputs.environment }}
    name: Deploy Web
    needs: release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ vars.ACR_REGISTRY_URL }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        id: build
        env:
          ACR_REGISTRY_URL: ${{ vars.ACR_REGISTRY_URL }}
          REPOSITORY_NAME: web
          VERSION: ${{ needs.release.outputs.version }}
          NEXT_PUBLIC_GOOGLE_ANALYTICS_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS_MEASUREMENT_ID }}
          NEXT_PUBLIC_SENTRY_WEB_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_WEB_DSN }}
          NEXT_PUBLIC_SENTRY_WEB_PROFILE_SAMPLE_RATE: ${{ vars.NEXT_PUBLIC_SENTRY_WEB_PROFILE_SAMPLE_RATE }}
          NEXT_PUBLIC_SENTRY_WEB_TRACES_SAMPLE_RATE: ${{ vars.NEXT_PUBLIC_SENTRY_WEB_TRACES_SAMPLE_RATE }}
          NEXT_PUBLIC_SENTRY_ENVIRONMENT: ${{ needs.release.outputs.environment }}
        run: |
          # Build a docker container and push it to ACR
          echo "Building image..."
          docker build \
            -t $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION \
            --build-arg NEXT_PUBLIC_GOOGLE_ANALYTICS_MEASUREMENT_ID=$NEXT_PUBLIC_GOOGLE_ANALYTICS_MEASUREMENT_ID \
            --build-arg NEXT_PUBLIC_SENTRY_WEB_DSN=$NEXT_PUBLIC_SENTRY_WEB_DSN \
            --build-arg NEXT_PUBLIC_SENTRY_WEB_PROFILE_SAMPLE_RATE=$NEXT_PUBLIC_SENTRY_WEB_PROFILE_SAMPLE_RATE \
            --build-arg NEXT_PUBLIC_SENTRY_WEB_TRACES_SAMPLE_RATE=$NEXT_PUBLIC_SENTRY_WEB_TRACES_SAMPLE_RATE \
            --build-arg NEXT_PUBLIC_SENTRY_ENVIRONMENT=$NEXT_PUBLIC_SENTRY_ENVIRONMENT \
            -f ./apps/web/Dockerfile .

          echo "Pushing image to ACR..."
          docker push $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION

      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.CONTAINER_APP_SP_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Azure CLI script
        uses: azure/cli@v2
        env:
          WEB_CONTAINER: ${{ vars.WEB_CONTAINER }}
          WEB_CONTAINER_RG: ${{ vars.WEB_CONTAINER_RG }}
          ACR_REGISTRY_URL: ${{ vars.ACR_REGISTRY_URL }}
          REPOSITORY_NAME: web
          VERSION: ${{ needs.release.outputs.version }}
        with:
          azcliversion: latest
          inlineScript: |
            az containerapp update \
              --name $WEB_CONTAINER \
              --resource-group $WEB_CONTAINER_RG \
              --image $ACR_REGISTRY_URL/$REPOSITORY_NAME:$VERSION

  sentry-release-web:
    name: Sentry Web
    needs: [release, deploy-web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Sentry CLI
        run: npm i -g @sentry/cli

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install PNPM
        run: npm i -g pnpm

      - name: Install
        run: pnpm i

      - name: Cache Web Build
        uses: actions/cache@v3
        with:
          path: apps/web/.next
          key: ${{ runner.os }}-web-next-${{ hashFiles('apps/web/**/*.[jt]s*', 'apps/web/package.json') }}
          restore-keys: |
            ${{ runner.os }}-web-next-

      - name: Build
        run: pnpm build:api

      - name: Sentry Release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_WEB_PROJECT }}
          ENVIRONMENT: ${{ needs.release.outputs.environment }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          sentry-cli releases new $VERSION
          sentry-cli releases set-commits --auto $VERSION
          sentry-cli releases deploys $VERSION new -e $ENVIRONMENT
          sentry-cli releases files $VERSION upload-sourcemaps apps/web/.next/static/chunks \
            --url-prefix '~/_next' \
            --validate \
            --rewrite

  publish-cli:
    needs: release
    name: Publish CLI
    runs-on: ubuntu-latest

    outputs:
      skip_publish: ${{ steps.check-versions.outputs.skip_publish || 'false' }}

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Check versions
        id: check-versions
        run: |
          current_version=`jq -r '.version' apps/cli/package.json`

          if [ "${{ github.ref_name }}" == "main" ]; then
            published_version=`npm show @keyshade/cli version`
          else
            published_version=`npm show @keyshade/cli@stage version`
          fi

          echo "Current version: $current_version"
          echo "Published version: $published_version"

          if [ "$current_version" = "$published_version" ]; then
            echo "Published version of @keyshade/cli is same as the current version: $current_version. Skipping publish."
          echo "skip_publish=true" >> $GITHUB_OUTPUT
          fi

      - uses: actions/setup-node@v4
        if: steps.check-versions.outputs.skip_publish != 'true'
        with:
          node-version: 22.x
          registry-url: 'https://registry.npmjs.org'
          scope: '@keyshade'

      - name: Install pnpm
        if: steps.check-versions.outputs.skip_publish != 'true'
        run: npm i -g pnpm

      - name: Cache PNPM store
        if: steps.check-versions.outputs.skip_publish != 'true'
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        if: steps.check-versions.outputs.skip_publish != 'true'
        run: pnpm install

      - name: Cache CLI Build
        if: steps.check-versions.outputs.skip_publish != 'true'
        uses: actions/cache@v3
        with:
          path: apps/cli/dist
          key: ${{ runner.os }}-cli-dist-${{ hashFiles('apps/cli/src/**/*', 'apps/cli/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cli-dist-

      - name: Build
        if: steps.check-versions.outputs.skip_publish != 'true'
        run: pnpm build:cli

      - name: Authenticate with npm
        if: steps.check-versions.outputs.skip_publish != 'true'
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish
        if: steps.check-versions.outputs.skip_publish != 'true'
        run: |
          ## Determine release tag
          if [ "${{ github.ref_name }}" == "main" ]; then
            release_tag=latest
          else
            release_tag=stage
          fi

          cd apps/cli && npm publish --provenance --access public --tag $release_tag
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  sentry-release-cli:
    name: Sentry CLI
    needs: [release, publish-cli]
    runs-on: ubuntu-latest
    if: ${{ needs.publish-cli.outputs.skip_publish != 'true' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: node
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org

      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install PNPM
        run: npm i -g pnpm

      - name: Install
        run: pnpm i

      - name: Cache CLI Build
        uses: actions/cache@v3
        with:
          path: apps/cli/dist
          key: ${{ runner.os }}-cli-dist-${{ hashFiles('apps/cli/src/**/*', 'apps/cli/package.json') }}
          restore-keys: |
            ${{ runner.os }}-cli-dist-

      - name: Build
        run: pnpm build:api

      - name: Install sentry-cli
        run: npm i -g @sentry/cli

      - name: Make release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_CLI_PROJECT }}
          VERSION: ${{ needs.release.outputs.version }}
          ENVIRONMENT: ${{ needs.release.outputs.environment }}
        run: |
          # CLI
          VERSION=`jq -r '.version' apps/cli/package.json`
          sentry-cli releases new -p $SENTRY_PROJECT $VERSION
          sentry-cli releases set-commits --auto $VERSION 
          sentry-cli releases deploys $VERSION new -e $ENVIRONMENT
          sentry-cli releases files $VERSION upload-sourcemaps apps/cli/dist \
            --validate \
            --rewrite
