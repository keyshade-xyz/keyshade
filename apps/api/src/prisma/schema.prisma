generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApprovalItemType {
  SECRET
  VARIABLE
  ENVIRONMENT
  PROJECT
  WORKSPACE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalAction {
  CREATE
  UPDATE
  DELETE
}

enum EventSource {
  SECRET
  VARIABLE
  ENVIRONMENT
  PROJECT
  WORKSPACE
  WORKSPACE_ROLE
  APPROVAL
  INTEGRATION
}

enum EventTriggerer {
  USER
  SYSTEM
}

enum EventSeverity {
  INFO
  WARN
  ERROR
}

enum EventType {
  INVITED_TO_WORKSPACE
  REMOVED_FROM_WORKSPACE
  ACCEPTED_INVITATION
  DECLINED_INVITATION
  CANCELLED_INVITATION
  LEFT_WORKSPACE
  WORKSPACE_MEMBERSHIP_UPDATED
  WORKSPACE_UPDATED
  WORKSPACE_CREATED
  WORKSPACE_ROLE_CREATED
  WORKSPACE_ROLE_UPDATED
  WORKSPACE_ROLE_DELETED
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  SECRET_UPDATED
  SECRET_DELETED
  SECRET_ADDED
  VARIABLE_UPDATED
  VARIABLE_DELETED
  VARIABLE_ADDED
  ENVIRONMENT_UPDATED
  ENVIRONMENT_DELETED
  ENVIRONMENT_ADDED
  APPROVAL_CREATED
  APPROVAL_UPDATED
  APPROVAL_DELETED
  APPROVAL_APPROVED
  APPROVAL_REJECTED
  INTEGRATION_ADDED
  INTEGRATION_UPDATED
  INTEGRATION_DELETED
}

enum Authority {
  // Workspace authorities
  CREATE_PROJECT
  READ_USERS
  ADD_USER
  REMOVE_USER
  UPDATE_USER_ROLE
  READ_WORKSPACE
  UPDATE_WORKSPACE
  DELETE_WORKSPACE
  CREATE_WORKSPACE_ROLE
  READ_WORKSPACE_ROLE
  UPDATE_WORKSPACE_ROLE
  DELETE_WORKSPACE_ROLE
  WORKSPACE_ADMIN
  MANAGE_APPROVALS

  // Project authorities
  READ_PROJECT
  UPDATE_PROJECT
  DELETE_PROJECT
  CREATE_SECRET
  READ_SECRET
  UPDATE_SECRET
  DELETE_SECRET
  CREATE_ENVIRONMENT
  READ_ENVIRONMENT
  UPDATE_ENVIRONMENT
  DELETE_ENVIRONMENT
  CREATE_VARIABLE
  READ_VARIABLE
  UPDATE_VARIABLE
  DELETE_VARIABLE
  CREATE_INTEGRATION
  READ_INTEGRATION
  UPDATE_INTEGRATION
  DELETE_INTEGRATION

  // User authorities
  CREATE_WORKSPACE
  CREATE_API_KEY
  READ_API_KEY
  UPDATE_API_KEY
  DELETE_API_KEY
  UPDATE_PROFILE
  READ_SELF
  UPDATE_SELF
  READ_EVENT
}

enum NotificationType {
  INVITED_TO_PROJECT
  REMOVED_FROM_PROJECT
  PROJECT_UPDATED
  PROJECT_DELETED
  SECRET_UPDATED
  SECRET_DELETED
  SECRET_ADDED
  API_KEY_UPDATED
  API_KEY_DELETED
  API_KEY_ADDED
  ENVIRONMENT_UPDATED
  ENVIRONMENT_DELETED
  ENVIRONMENT_ADDED
  VARIABLE_UPDATED
  VARIABLE_DELETED
  VARIABLE_ADDED
  APPROVAL_CREATED
  APPROVAL_UPDATED
  APPROVAL_DELETED
  APPROVAL_APPROVED
  APPROVAL_REJECTED
}

enum IntegrationType {
  DISCORD
  SLACK
  GITHUB
  GITLAB
}

model Event {
  id          String         @id @default(cuid())
  source      EventSource
  triggerer   EventTriggerer
  severity    EventSeverity
  type        EventType
  timestamp   DateTime       @default(now())
  metadata    Json
  title       String
  description String?
  itemId      String?

  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId      String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  workspaceId String?
}

model Notification {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  readAt    DateTime?
  type      NotificationType
  message   String
  link      String?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  name                 String?
  profilePictureUrl    String?
  isActive             Boolean       @default(true)
  isOnboardingFinished Boolean       @default(false)
  isAdmin              Boolean       @default(false)
  subscription         Subscription?

  workspaceMembers   WorkspaceMember[]
  workspaces         Workspace[]
  apiKeys            ApiKey[]
  otp                Otp?
  notifications      Notification[]
  secrets            Secret[] // Stores the secrets the user updated
  variables          Variable[] // Stores the variables the user updated
  projects           Project[] // Stores the projects the user updated
  environments       Environment[] // Stores the environments the user updated
  secretVersion      SecretVersion[]
  variableVersion    VariableVersion[]
  events             Event[]
  requestedApprovals Approval[]        @relation("requestedBy")
  approvedApprovals  Approval[]        @relation("approvedBy")
  rejectedApprovals  Approval[]        @relation("rejectedBy")

  @@index([email], name: "email")
}

model Subscription {
  id       String  @id @default(cuid())
  plan     String
  isActive Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Integration {
  id        String          @id @default(cuid())
  name      String
  metadata  Json
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  type      IntegrationType
  notifyOn  EventType[]

  // An integration will always be tied to a workspace
  workspace     Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId   String
  // An integration may or may not have relations with projects
  project       Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId     String?
  // An integration may or may not have relations with environments
  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String?

  @@unique([workspaceId, name])
}

model Environment {
  id              String   @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDefault       Boolean  @default(false)
  pendingCreation Boolean  @default(false)

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  secrets      Secret[]
  variables    Variable[]
  integrations Integration[]

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
}

model Project {
  id              String   @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  publicKey       String
  privateKey      String? // We store this only if the user wants us to do so! 
  storePrivateKey Boolean  @default(false)
  isDisabled      Boolean  @default(false) // This is set to true when the user stops his subscription and still has premium features in use
  isPublic        Boolean  @default(false)
  pendingCreation Boolean  @default(false)

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  workspaceId    String
  workspace      Workspace                         @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  secrets        Secret[]
  variables      Variable[]
  environments   Environment[]
  workspaceRoles ProjectWorkspaceRoleAssociation[]
  integrations   Integration[]
}

model ProjectWorkspaceRoleAssociation {
  id String @id @default(cuid())

  role   WorkspaceRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  @@unique([roleId, projectId])
}

model WorkspaceRole {
  id                String   @id @default(cuid())
  name              String
  description       String?
  colorCode         String?
  hasAdminAuthority Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  authorities      Authority[]
  workspaceMembers WorkspaceMemberRoleAssociation[]
  projects         ProjectWorkspaceRoleAssociation[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([workspaceId, name])
}

model WorkspaceMemberRoleAssociation {
  id String @id @default(cuid())

  role   WorkspaceRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String

  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceMemberId String

  @@unique([roleId, workspaceMemberId])
}

// This model stores the membership of a workspace-user and their roles.
model WorkspaceMember {
  id                 String                           @id @default(cuid())
  user               User                             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  workspace          Workspace                        @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId        String
  invitationAccepted Boolean                          @default(false)
  roles              WorkspaceMemberRoleAssociation[]

  @@unique([workspaceId, userId])
}

model SecretVersion {
  id      String @id @default(cuid())
  value   String
  version Int    @default(1)

  secretId String
  secret   Secret @relation(fields: [secretId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdOn   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  createdById String?

  @@unique([secretId, version])
}

model Secret {
  id              String          @id @default(cuid())
  name            String
  versions        SecretVersion[] // Stores the versions of the secret
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  rotateAt        DateTime?
  note            String?
  pendingCreation Boolean         @default(false)

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  environmentId String
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model VariableVersion {
  id      String @id @default(cuid())
  value   String
  version Int    @default(1)

  variableId String
  variable   Variable @relation(fields: [variableId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdOn   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  createdById String?

  @@unique([variableId, version])
}

model Variable {
  id              String            @id @default(cuid())
  name            String
  versions        VariableVersion[] // Stores the versions of the variable
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  note            String?
  pendingCreation Boolean           @default(false)

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  environmentId String
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ApiKey {
  id          String      @id @default(cuid())
  name        String
  value       String      @unique
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorities Authority[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Otp {
  code      String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([userId, code], name: "userCode")
  @@index([expiresAt], name: "expiresAt")
}

model Workspace {
  id              String   @id @default(cuid())
  name            String
  description     String?
  isFreeTier      Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ownerId         String
  approvalEnabled Boolean  @default(false)
  isDefault       Boolean  @default(false)

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  projects     Project[]
  members      WorkspaceMember[]
  roles        WorkspaceRole[]
  events       Event[]
  approvals    Approval[]
  integrations Integration[]

  @@unique([name, ownerId])
}

model Approval {
  id         String           @id @default(cuid())
  itemType   ApprovalItemType
  status     ApprovalStatus   @default(PENDING)
  action     ApprovalAction
  metadata   Json
  itemId     String
  reason     String?
  createdAt  DateTime         @default(now())
  approvedAt DateTime?
  rejectedAt DateTime?

  requestedBy   User?   @relation(fields: [requestedById], references: [id], onUpdate: Cascade, onDelete: SetNull, name: "requestedBy")
  requestedById String?
  approvedBy    User?   @relation(fields: [approvedById], references: [id], onUpdate: Cascade, onDelete: SetNull, name: "approvedBy")
  approvedById  String?
  rejectedBy    User?   @relation(fields: [rejectedById], references: [id], onUpdate: Cascade, onDelete: SetNull, name: "rejectedBy")
  rejectedById  String?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([itemType, itemId])
}

model ChangeNotificationSocketMap {
  id            String @id @default(cuid())
  socketId      String
  environmentId String

  @@index([environmentId, socketId])
}
