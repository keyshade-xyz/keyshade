generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Authority {
  // Workspace authorities
  CREATE_PROJECT
  READ_USERS
  ADD_USER
  REMOVE_USER
  UPDATE_USER_ROLE
  READ_WORKSPACE
  UPDATE_WORKSPACE
  DELETE_WORKSPACE
  TRANSFER_OWNERSHIP
  CREATE_WORKSPACE_ROLE
  READ_WORKSPACE_ROLE
  UPDATE_WORKSPACE_ROLE
  DELETE_WORKSPACE_ROLE
  WORKSPACE_ADMIN

  // Project authorities
  READ_PROJECT
  UPDATE_PROJECT
  DELETE_PROJECT
  CREATE_SECRET
  READ_SECRET
  UPDATE_SECRET
  DELETE_SECRET
  CREATE_ENVIRONMENT
  READ_ENVIRONMENT
  UPDATE_ENVIRONMENT
  DELETE_ENVIRONMENT

  // User authorities
  CREATE_WORKSPACE
  CREATE_API_KEY
  READ_API_KEY
  UPDATE_API_KEY
  DELETE_API_KEY
  UPDATE_PROFILE
}

enum NotificationType {
  INVITED_TO_PROJECT
  REMOVED_FROM_PROJECT
  PROJECT_UPDATED
  PROJECT_DELETED
  SECRET_UPDATED
  SECRET_DELETED
  SECRET_ADDED
  API_KEY_UPDATED
  API_KEY_DELETED
  API_KEY_ADDED
  ENVIRONMENT_UPDATED
  ENVIRONMENT_DELETED
  ENVIRONMENT_ADDED
}

model Notification {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  readAt    DateTime?
  type      NotificationType
  message   String
  link      String?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  name                 String?
  profilePictureUrl    String?
  isActive             Boolean       @default(true)
  isOnboardingFinished Boolean       @default(false)
  isAdmin              Boolean       @default(false)
  subscription         Subscription?

  workspaceMembers WorkspaceMember[]
  workspaces       Workspace[]
  apiKeys          ApiKey[]
  otp              Otp?
  notifications    Notification[]
  secrets          Secret[] // Stores the secrets the user updated
  projects         Project[] // Stores the projects the user updated
  environments     Environment[] // Stores the environments the user updated
  secretVersion    SecretVersion[]

  @@index([email], name: "email")
}

model Subscription {
  id       String  @id @default(cuid())
  plan     String
  isActive Boolean @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Environment {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDefault   Boolean  @default(false)

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  secrets Secret[]

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
}

model Project {
  id              String   @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  publicKey       String
  privateKey      String? // We store this only if the user wants us to do so! 
  storePrivateKey Boolean  @default(false)
  isDisabled      Boolean  @default(false) // This is set to true when the user stops his subscription and still has premium features in use
  isPublic        Boolean  @default(false)

  lastUpdatedBy   User?  @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  secrets                    Secret[]
  environments               Environment[]
  workspaceRole              WorkspaceRole? @relation(fields: [workspaceRoleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  workspaceRoleId            String?
  apiKeyWorkspaceAuthorityId String?
}

model WorkspaceRole {
  id                String   @id @default(cuid())
  name              String
  description       String?
  colorCode         String?
  hasAdminAuthority Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  authorities      Authority[]
  workspaceMembers WorkspaceMemberRoleAssociation[]

  projects Project[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([workspaceId, name])
}

model WorkspaceMemberRoleAssociation {
  id String @id @default(cuid())

  role   WorkspaceRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String

  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceMemberId String

  @@unique([roleId, workspaceMemberId])
}

// This model stores the membership of a workspace-user and their roles.
model WorkspaceMember {
  id                 String                           @id @default(cuid())
  user               User                             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  workspace          Workspace                        @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId        String
  invitationAccepted Boolean                          @default(false)
  roles              WorkspaceMemberRoleAssociation[]

  @@unique([workspaceId, userId])
}

model SecretVersion {
  id      String @id @default(cuid())
  value   String
  version Int    @default(1)

  secretId String
  secret   Secret @relation(fields: [secretId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdOn   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  createdById String?
}

model Secret {
  id        String          @id @default(cuid())
  name      String
  versions  SecretVersion[] // Stores the versions of the secret
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  rotateAt  DateTime?

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  environmentId String
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ApiKey {
  id        String    @id @default(cuid())
  name      String
  value     String    @unique
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Otp {
  code      String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([userId, code], name: "userCode")
  @@index([expiresAt], name: "expiresAt")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  isFreeTier  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  lastUpdatedBy   User?   @relation(fields: [lastUpdatedById], references: [id], onUpdate: Cascade, onDelete: SetNull)
  lastUpdatedById String?

  projects Project[]
  members  WorkspaceMember[]
  roles    WorkspaceRole[]

  @@unique([name, ownerId])
}
